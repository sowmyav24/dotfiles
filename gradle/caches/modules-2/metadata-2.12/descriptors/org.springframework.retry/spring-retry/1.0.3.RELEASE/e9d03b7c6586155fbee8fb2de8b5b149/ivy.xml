<?xml version="1.0" encoding="UTF-8"?>
<ivy-module version="2.0" xmlns:m="http://ant.apache.org/ivy/maven">
  <info organisation="org.springframework.retry" module="spring-retry" revision="1.0.3.RELEASE" status="release" publication="20150723175102">
    <license name="Apache 2.0" url="http://www.apache.org/licenses/LICENSE-2.0.txt"/>
    <description homepage="http://www.springsource.org">Spring Retry provides an abstraction around retrying failed operations, with an emphasis on declarative control of the process and policy-based bahaviour that is easy to extend and customize.  For instance, you can configure a plain POJO operation to retry if it fails, based on the type of exception, and with a fixed or exponential backoff.</description>
  </info>
  <configurations>
    <conf name="default" visibility="public" description="runtime dependencies and master artifact can be used with this conf" extends="runtime,master"/>
    <conf name="master" visibility="public" description="contains only the artifact published by this module itself, with no transitive dependencies"/>
    <conf name="compile" visibility="public" description="this is the default scope, used if none is specified. Compile dependencies are available in all classpaths."/>
    <conf name="provided" visibility="public" description="this is much like compile, but indicates you expect the JDK or a container to provide it. It is only available on the compilation classpath, and is not transitive."/>
    <conf name="runtime" visibility="public" description="this scope indicates that the dependency is not required for compilation, but is for execution. It is in the runtime and test classpaths, but not the compile classpath." extends="compile"/>
    <conf name="test" visibility="private" description="this scope indicates that the dependency is not required for normal use of the application, and is only available for the test compilation and execution phases." extends="runtime"/>
    <conf name="system" visibility="public" description="this scope is similar to provided except that you have to provide the JAR which contains it explicitly. The artifact is always available and is not looked up in a repository."/>
    <conf name="sources" visibility="public" description="this configuration contains the source artifact of this module, if any."/>
    <conf name="javadoc" visibility="public" description="this configuration contains the javadoc artifact of this module, if any."/>
    <conf name="optional" visibility="public" description="contains all optional dependencies"/>
  </configurations>
  <publications/>
  <dependencies>
    <dependency org="junit" name="junit" rev="4.8.2" force="true" conf="test-&gt;runtime(*),master(*)"/>
    <dependency org="org.easymock" name="easymock" rev="2.3" force="true" conf="test-&gt;runtime(*),master(*)"/>
    <dependency org="org.aspectj" name="aspectjrt" rev="1.6.6" force="true" conf="test-&gt;runtime(*),master(*)"/>
    <dependency org="org.aspectj" name="aspectjweaver" rev="1.6.6" force="true" conf="test-&gt;runtime(*),master(*)"/>
    <dependency org="org.springframework" name="spring-test" rev="3.0.5.RELEASE" force="true" conf="test-&gt;runtime(*),master(*)"/>
    <dependency org="org.springframework" name="spring-context" rev="3.0.5.RELEASE" force="true" conf="compile-&gt;compile(*),master(*);runtime-&gt;runtime(*)"/>
    <dependency org="org.springframework" name="spring-tx" rev="3.0.5.RELEASE" force="true" conf="test-&gt;runtime(*),master(*)"/>
    <dependency org="log4j" name="log4j" rev="1.2.14" force="true" conf="optional-&gt;compile(*),provided(*),master(*)"/>
  </dependencies>
</ivy-module>
